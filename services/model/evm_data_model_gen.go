// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"fmt"
	"time"

	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"
)

var (
	cachePublicEvmDataHashIdPrefix = "cache:public:evmData:hashId:"
)

type (
	evmDataModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *EvmData) error

		FindOne(ctx context.Context, hashId string) (*EvmData, error)
		Update(ctx context.Context, tx *gorm.DB, data *EvmData) error

		Delete(ctx context.Context, tx *gorm.DB, hashId string) error
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultEvmDataModel struct {
		gormc.CachedConn
		table string
	}

	EvmData struct {
		BlockTime        time.Time `gorm:"column:block_time"`
		BlockNum         int64     `gorm:"column:block_num"`
		ChainId          string    `gorm:"column:chain_id"`
		PairAddress      string    `gorm:"column:pair_address"`
		FactoryAddress   string    `gorm:"column:factory_address"`
		SwapName         string    `gorm:"column:swap_name"`
		Maker            string    `gorm:"column:maker"`
		To               string    `gorm:"column:to"`
		Action           int64     `gorm:"column:action"`
		Type             int64     `gorm:"column:type"`
		TxHash           string    `gorm:"column:tx_hash"`
		HashId           string    `gorm:"column:hash_id"`
		TokenAddress     string    `gorm:"column:token_address"`
		BaseTokenAddress string    `gorm:"column:base_token_address"`
		TokenSymbol      string    `gorm:"column:token_symbol"`
		BaseTokenSymbol  string    `gorm:"column:base_token_symbol"`
		TokenDecimal     int64     `gorm:"column:token_decimal"`
		BaseTokenDecimal int64     `gorm:"column:base_token_decimal"`
		TokenAmount      int64     `gorm:"column:token_amount"`
		BaseTokenAmount  int64     `gorm:"column:base_token_amount"`
		TokenPrice       int64     `gorm:"column:token_price"`
		BaseTokenPrice   int64     `gorm:"column:base_token_price"`
		Volume           int64     `gorm:"column:volume"`
	}
)

func (EvmData) TableName() string {
	return `"public"."evm_data"`
}

func newEvmDataModel(conn *gorm.DB, c cache.CacheConf) *defaultEvmDataModel {
	return &defaultEvmDataModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      `"public"."evm_data"`,
	}
}

func (m *defaultEvmDataModel) Insert(ctx context.Context, tx *gorm.DB, data *EvmData) error {

	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(&data).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultEvmDataModel) FindOne(ctx context.Context, hashId string) (*EvmData, error) {
	publicEvmDataHashIdKey := fmt.Sprintf("%s%v", cachePublicEvmDataHashIdPrefix, hashId)
	var resp EvmData
	err := m.QueryCtx(ctx, &resp, publicEvmDataHashIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&EvmData{}).Where("hash_id = ?", hashId).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultEvmDataModel) Update(ctx context.Context, tx *gorm.DB, data *EvmData) error {
	old, err := m.FindOne(ctx, data.HashId)
	if err != nil && err != ErrNotFound {
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(data).Error
	}, m.getCacheKeys(old)...)
	return err
}

func (m *defaultEvmDataModel) getCacheKeys(data *EvmData) []string {
	if data == nil {
		return []string{}
	}
	publicEvmDataHashIdKey := fmt.Sprintf("%s%v", cachePublicEvmDataHashIdPrefix, data.HashId)
	cacheKeys := []string{
		publicEvmDataHashIdKey,
	}
	cacheKeys = append(cacheKeys, m.customCacheKeys(data)...)
	return cacheKeys
}

func (m *defaultEvmDataModel) Delete(ctx context.Context, tx *gorm.DB, hashId string) error {
	data, err := m.FindOne(ctx, hashId)
	if err != nil {
		if err == ErrNotFound {
			return nil
		}
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&EvmData{}, hashId).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultEvmDataModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.TransactCtx(ctx, fn)
}

func (m *defaultEvmDataModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cachePublicEvmDataHashIdPrefix, primary)
}

func (m *defaultEvmDataModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&EvmData{}).Where("hash_id = ?", primary).Take(v).Error
}
