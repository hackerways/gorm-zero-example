// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"fmt"
	"time"

	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"
)

var (
	cacheDataFlowPairHotData4HIdPrefix                 = "cache:dataFlow:pairHotData4H:id:"
	cacheDataFlowPairHotData4HChainIdPairAddressPrefix = "cache:dataFlow:pairHotData4H:chainId:pairAddress:"
)

type (
	pairHotData4HModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *PairHotData4H) error

		FindOne(ctx context.Context, id int64) (*PairHotData4H, error)
		FindOneByChainIdPairAddress(ctx context.Context, chainId int64, pairAddress string) (*PairHotData4H, error)
		Update(ctx context.Context, tx *gorm.DB, data *PairHotData4H) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultPairHotData4HModel struct {
		gormc.CachedConn
		table string
	}

	PairHotData4H struct {
		Id          int64     `gorm:"column:id"`
		ChainId     int64     `gorm:"column:chain_id"`     // 加密货币id
		PairAddress string    `gorm:"column:pair_address"` // 交易对地址
		UpDown      float64   `gorm:"column:up_down"`      // 涨跌幅
		Volume      float64   `gorm:"column:volume"`       // 交易量
		SellCount   int64     `gorm:"column:sell_count"`   // 卖出数
		BuyCount    int64     `gorm:"column:buy_count"`    // 买入数
		BuyNetUsd   float64   `gorm:"column:buy_net_usd"`  // 净买入
		CreateAt    time.Time `gorm:"column:create_at"`
		UpdateAt    time.Time `gorm:"column:update_at"`
	}
)

func (PairHotData4H) TableName() string {
	return "`pair_hot_data_4h`"
}

func newPairHotData4HModel(conn *gorm.DB, c cache.CacheConf) *defaultPairHotData4HModel {
	return &defaultPairHotData4HModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`pair_hot_data_4h`",
	}
}

func (m *defaultPairHotData4HModel) Insert(ctx context.Context, tx *gorm.DB, data *PairHotData4H) error {

	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(&data).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultPairHotData4HModel) FindOne(ctx context.Context, id int64) (*PairHotData4H, error) {
	dataFlowPairHotData4HIdKey := fmt.Sprintf("%s%v", cacheDataFlowPairHotData4HIdPrefix, id)
	var resp PairHotData4H
	err := m.QueryCtx(ctx, &resp, dataFlowPairHotData4HIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&PairHotData4H{}).Where("`id` = ?", id).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPairHotData4HModel) FindOneByChainIdPairAddress(ctx context.Context, chainId int64, pairAddress string) (*PairHotData4H, error) {
	dataFlowPairHotData4HChainIdPairAddressKey := fmt.Sprintf("%s%v:%v", cacheDataFlowPairHotData4HChainIdPairAddressPrefix, chainId, pairAddress)
	var resp PairHotData4H
	err := m.QueryRowIndexCtx(ctx, &resp, dataFlowPairHotData4HChainIdPairAddressKey, m.formatPrimary, func(conn *gorm.DB, v interface{}) (interface{}, error) {
		if err := conn.Model(&PairHotData4H{}).Where("`chain_id` = ? and `pair_address` = ?", chainId, pairAddress).Take(&resp).Error; err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPairHotData4HModel) Update(ctx context.Context, tx *gorm.DB, data *PairHotData4H) error {
	old, err := m.FindOne(ctx, data.Id)
	if err != nil && err != ErrNotFound {
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(data).Error
	}, m.getCacheKeys(old)...)
	return err
}

func (m *defaultPairHotData4HModel) getCacheKeys(data *PairHotData4H) []string {
	if data == nil {
		return []string{}
	}
	dataFlowPairHotData4HChainIdPairAddressKey := fmt.Sprintf("%s%v:%v", cacheDataFlowPairHotData4HChainIdPairAddressPrefix, data.ChainId, data.PairAddress)
	dataFlowPairHotData4HIdKey := fmt.Sprintf("%s%v", cacheDataFlowPairHotData4HIdPrefix, data.Id)
	cacheKeys := []string{
		dataFlowPairHotData4HChainIdPairAddressKey, dataFlowPairHotData4HIdKey,
	}
	cacheKeys = append(cacheKeys, m.customCacheKeys(data)...)
	return cacheKeys
}

func (m *defaultPairHotData4HModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		if err == ErrNotFound {
			return nil
		}
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&PairHotData4H{}, id).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultPairHotData4HModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.TransactCtx(ctx, fn)
}

func (m *defaultPairHotData4HModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheDataFlowPairHotData4HIdPrefix, primary)
}

func (m *defaultPairHotData4HModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&PairHotData4H{}).Where("`id` = ?", primary).Take(v).Error
}
